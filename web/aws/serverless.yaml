service: irrigation
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  versionFunctions: false
  runtime: nodejs20.x
  memorySize: 512
  region: ap-southeast-2
  stackTags:
    project: irrigation
  iam:
    role:
      statements:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: !GetAtt StorageQueue.Arn
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:BatchGetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            - dynamodb:DeleteItem
          Resource: !GetAtt StateTable.Arn
        - Effect: Allow
          Action: iot:Publish
          Resource: "*"
  environment:
    DYNAMODB_TABLE_NAME: !Ref StateTable
    API_GATEWAY_ENDPOINT: !Sub "https://${WebsocketsApi.ApiId}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
    IOT_ENDPOINT: ${env:IOT_ENDPOINT}
    VAPID_SUBJECT: ${env:VAPID_SUBJECT}
    VAPID_PUBLIC_KEY: ${env:VAPID_PUBLIC_KEY}
    VAPID_PRIVATE_KEY: ${env:VAPID_PRIVATE_KEY}

plugins:
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false

functions:
  IotListener:
    handler: src/handleDeviceMessage.handleDeviceMessage
    environment:
      STORAGE_QUEUE_URL: !Ref StorageQueue

  WebSocketListener:
    handler: src/handleWebSocketEvent.handleWebSocketEvent
    events:
      - websocket:
          route: $connect
          # This is unsupported, authorizer type set to aws_iam under extensions
          # authorizer:
          #   type: AWS_IAM
      - websocket: $disconnect
      - websocket:
          route: $default
          routeResponseSelectionExpression: $default

resources:
  Parameters:
    ErrorTopicName:
      Type: String
      Default: general-alarms

  Resources:
    IoTRuleOut:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: "IrrigationOut_${sls:stage}"
        TopicRulePayload:
          AwsIotSqlVersion: "2016-03-23"
          Sql: "SELECT encode(*, 'base64') as data, timestamp() as time, topic(2) as clientId, topic(3) as deviceId, topic(4) as type FROM 'icu-out/#'"
          Actions:
            - Lambda:
                FunctionArn: !GetAtt IotListenerLambdaFunction.Arn
          ErrorAction:
            Sns:
              TargetArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ErrorTopicName}"
              RoleArn: !GetAtt ErrorActionRole.Arn
              MessageFormat: RAW

    IoTRulePresence:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: "IrrigationPresence_${sls:stage}"
        TopicRulePayload:
          AwsIotSqlVersion: "2016-03-23"
          Sql: "SELECT clientId as deviceId, timestamp as time, eventType as type, ipAddress, disconnectReason FROM '$aws/events/presence/+/+' WHERE startswith(clientId, 'icu-')"
          Actions:
            - Lambda:
                FunctionArn: !GetAtt IotListenerLambdaFunction.Arn
          ErrorAction:
            Sns:
              TargetArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ErrorTopicName}"
              RoleArn: !GetAtt ErrorActionRole.Arn
              MessageFormat: RAW

    IoTLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref IotListenerLambdaFunction
        Principal: iot.amazonaws.com

    ErrorActionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: irrigation-${sls:stage}-ErrorNotifyRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
        Policies:
          - PolicyName: PublishToErrorTopic
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: sns:Publish
                  Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ErrorTopicName}"

    StorageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: irrigation-${sls:stage}-StorageQueue
        MessageRetentionPeriod: 1209600

    StateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: irrigation-${sls:stage}-Data
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: B
          - AttributeName: sk
            AttributeType: B
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: exp

    AuthenticatedUserRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: irrigation-${sls:stage}-AuthRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sts:AssumeRoleWithWebIdentity
              Principal:
                Federated: cognito-identity.amazonaws.com
              Condition:
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
        Policies:
          - PolicyName: AuthRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: execute-api:Invoke
                  Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*"

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: irrigation-${sls:stage}-UserPool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 30
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        UsernameConfiguration:
          CaseSensitive: false
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        AliasAttributes:
          - email
          - preferred_username
        AutoVerifiedAttributes:
          - email
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: irrigation-${sls:stage}
        UserPoolId: !Ref UserPool

    UserPoolWebClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: irrigation-${sls:stage}-WebClient
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 365
        CallbackURLs:
          - http://localhost:5173/auth
          - https://irrigation.danielmcm.com/auth
          - https://irrigation-ui1-dev.pages.dev/auth
          - https://irrigation2.danielmcm.com/auth
          - https://irrigation-ui2-dev.pages.dev/auth
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        EnableTokenRevocation: false
        AllowedOAuthScopes:
          - email
          - openid
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: LEGACY
        SupportedIdentityProviders:
          - COGNITO

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: irrigation-${sls:stage}-IdentityPool
        AllowClassicFlow: false
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref UserPoolWebClient
            ProviderName: !GetAtt UserPool.ProviderName
            ServerSideTokenCheck: false

    IdentityPoolRoleMapping:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt AuthenticatedUserRole.Arn

  extensions:
    # Configuring AWS_IAM authorization is not currently supported by Serverless
    SconnectWebsocketsRoute:
      Properties:
        AuthorizationType: AWS_IAM
# resources not included:
# thing https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-thing.html
# thing policy: permission to connect, publish, subscribe and receive
# certificate attached to the thing
